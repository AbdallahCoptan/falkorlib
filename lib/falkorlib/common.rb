# -*- encoding: utf-8 -*-

require "falkorlib"

### Configure colors ###
begin
    require 'term/ansicolor'
    COLOR = true
rescue Exception => e
    puts "/!\\ cannot find the 'term/ansicolor' library"
    puts "    Consider installing it by 'gem install term-ansicolor'"
    COLOR = false
end

require 'yaml'

module FalkorLib
    module Common
	    module_function
        ##################################
        ### Default printing functions ###
        ##################################
	    # Print a text in bold
        def bold(str)
            COLOR == true ? Term::ANSIColor.bold(str) : str
        end


        # Print a text in green
        def green(str)
            COLOR == true ? Term::ANSIColor.green(str) : str
        end

        # Print a text in red
        def red(str)
            COLOR == true ? Term::ANSIColor.red(str) : str
        end

        # Print a text in cyan
        def cyan(str)
            COLOR == true ? Term::ANSIColor.cyan(str) : str
        end

        # Print an info message
        def info(str)
            puts green("[INFO] " + str)
        end

        # Print an warning message
        def warning(str)
            puts cyan("/!\\ WARNING: " + str)
        end
        def warn(str)
            warning(str)
        end
        ## Print an error message and abort
        def error(str)
            #abort red("*** ERROR *** " + str)
	        $stderr.puts red("*** ERROR *** " + str)
	        exit 1
        end
        def not_implemented()
            error("NOT YET IMPLEMENTED")
        end

        ##############################
        ### Interaction functions  ###
        ##############################

        ## Ask a question
        def ask(question, default_answer='')
            print "#{question} "
            print "[Default: #{default_answer}]" unless default_answer == ''
            print ": "
            STDOUT.flush
            answer = STDIN.gets.chomp
            return answer.empty?() ? default_answer : answer
        end

        ## Ask whether or not to really continue
        def really_continue?(default_answer = 'Yes')
            pattern = (default_answer =~ /yes/i) ? '(Y|n)' : '(y|N)'
            answer = ask( cyan("=> Do you really want to continue #{pattern}?"), default_answer)
            exit 0 if answer =~ /n.*/i
        end

        ############################
        ### Execution  functions ###
        ############################

        ## Check for the presence of a given command
        def command?(name)
	        `which #{name}`
	        $?.success?
        end

        ## Execute a given command - exit if status != 0
        def execute(cmd)
	        sh %{#{cmd}} do |ok, res|
		        if ! ok
			        error("The command '#{cmd}' failed with exit status #{res.exitstatus}")
		        end
	        end
        end

        ## "Nice" way to present run commands
        ## Ex: run %{ hostname -f }
        def run(cmds)
	        puts bold("[Running]\n#{cmds.gsub(/^\s*/, '   ')}")
	        #puts cmds.split(/\n */).inspect
	        cmds.split(/\n */).each do |cmd|
		        next if cmd.empty?
		        system("#{cmd}") unless FalkorLib.config.debug
	        end
        end

        ###############################
        ### YAML File loading/store ###
        ###############################

        # Return the yaml content as a Hash object
        def load_config(filepath)
	        YAML::load_file(filepath)
        end

        # Store the Hash object as a Yaml file
        def store_config(filepath, hash)
	        File.open( filepath, 'w') do |f|
		        f.print "# ", File.basename(filepath), "\n"
		        f.puts "# /!\\ DO NOT EDIT THIS FILE: it has been automatically generated"
		        f.puts hash.to_yaml
	        end
        end


    end
end
