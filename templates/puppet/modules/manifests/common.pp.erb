################################################################################
# Time-stamp: <Wed 2017-08-23 15:14 svarrette>
#
# File::      <tt>common.pp</tt>
# Author::    <%= config[:author] %> (<%= config[:mail] %>)
# Copyright:: Copyright (c) <%= Time.now.year %> <%= config[:author] %>
# License::   <%= config[:license].capitalize %>
#
# ------------------------------------------------------------------------------
# = Class: <%= config[:shortname] %>::common
#
# Base class to be inherited by the other <%= config[:shortname] %> classes, containing the common code.
#
# Note: respect the Naming standard provided here[http://projects.puppetlabs.com/projects/puppet/wiki/Module_Standards]
#
class <%= config[:shortname] %>::common {

  # Load the variables used in this module. Check the params.pp file
  require <%= config[:shortname] %>::params

  # Order
  if ($<%= config[:shortname] %>::ensure == 'present') {
    Group['<%= config[:shortname] %>'] -> User['<%= config[:shortname] %>'] -> Package['<%= config[:shortname] %>']
  }
  else {
    Package['<%= config[:shortname] %>'] -> User['<%= config[:shortname] %>'] -> Group['<%= config[:shortname] %>']
  }

  # Prepare the user and group
  group { '<%= config[:shortname] %>':
    ensure => $<%= config[:shortname] %>::ensure,
    name   => $<%= config[:shortname] %>::params::group,
    gid    => $<%= config[:shortname] %>::params::gid,
  }
  user { '<%= config[:shortname] %>':
    ensure     => $<%= config[:shortname] %>::ensure,
    name       => $<%= config[:shortname] %>::params::username,
    uid        => $<%= config[:shortname] %>::params::gid,
    gid        => $<%= config[:shortname] %>::params::gid,
    comment    => $<%= config[:shortname] %>::params::comment,
    home       => $<%= config[:shortname] %>::params::home,
    managehome => true,
    system     => true,
    shell      => $<%= config[:shortname] %>::params::shell,
  }

  package { '<%= config[:shortname] %>':
    name    => $<%= config[:shortname] %>::params::packagename,
    ensure  => $<%= config[:shortname] %>::ensure}",
  }
  package { $<%= config[:shortname] %>::params::extra_packages:
    ensure => 'present'
  }

  if $<%= config[:shortname] %>::ensure == 'present' {

    # Prepare the log directory
    file { "${<%= config[:shortname] %>::params::logdir}":
      ensure => 'directory',
      owner  => "${<%= config[:shortname] %>::params::logdir_owner}",
      group  => "${<%= config[:shortname] %>::params::logdir_group}",
      mode   => "${<%= config[:shortname] %>::params::logdir_mode}",
      require => Package['<%= config[:shortname] %>'],
    }

    # Configuration file
    file { "${<%= config[:shortname] %>::params::configdir}":
      ensure => 'directory',
      owner  => "${<%= config[:shortname] %>::params::configdir_owner}",
      group  => "${<%= config[:shortname] %>::params::configdir_group}",
      mode   => "${<%= config[:shortname] %>::params::configdir_mode}",
      require => Package['<%= config[:shortname] %>'],
    }
    # Regular version using file resource
    file { '<%= config[:shortname] %>.conf':
      ensure  => "${<%= config[:shortname] %>::ensure}",
      path    => "${<%= config[:shortname] %>::params::configfile}",
      owner   => "${<%= config[:shortname] %>::params::configfile_owner}",
      group   => "${<%= config[:shortname] %>::params::configfile_group}",
      mode    => "${<%= config[:shortname] %>::params::configfile_mode}",
      #content => template("<%= config[:shortname] %>/<%= config[:shortname] %>conf.erb"),
      #source => "puppet:///modules/<%= config[:shortname] %>/<%= config[:shortname] %>.conf",
      #notify  => Service['<%= config[:shortname] %>'],
      require => [
        #File["${<%= config[:shortname] %>::params::configdir}"],
        Package['<%= config[:shortname] %>']
      ],
    }

    # # Concat version -- see https://forge.puppetlabs.com/puppetlabs/concat
    # include concat::setup
    # concat { "${<%= config[:shortname] %>::params::configfile}":
      #     warn    => false,
      #     owner   => "${<%= config[:shortname] %>::params::configfile_owner}",
      #     group   => "${<%= config[:shortname] %>::params::configfile_group}",
      #     mode    => "${<%= config[:shortname] %>::params::configfile_mode}",
      #     #notify  => Service['<%= config[:shortname] %>'],
      #     require => Package['<%= config[:shortname] %>'],
      # }
    # # Populate the configuration file
    # concat::fragment { "${<%= config[:shortname] %>::params::configfile}_header":
      #     ensure  => "${<%= config[:shortname] %>::ensure}",
      #     target  => "${<%= config[:shortname] %>::params::configfile}",
      #     content => template("<%= config[:shortname] %>/<%= config[:shortname] %>_header.conf.erb"),
      #     #source => "puppet:///modules/<%= config[:shortname] %>/<%= config[:shortname] %>_header.conf",
      #     order   => '01',
      # }
    # concat::fragment { "${<%= config[:shortname] %>::params::configfile}_footer":
      #     ensure  => "${<%= config[:shortname] %>::ensure}",
      #     target  => "${<%= config[:shortname] %>::params::configfile}",
      #     content => template("<%= config[:shortname] %>/<%= config[:shortname] %>_footer.conf.erb"),
      #     #source => "puppet:///modules/<%= config[:shortname] %>/<%= config[:shortname] %>_footer.conf",
      #     order   => '99',
      # }

    # PID file directory
    file { "${<%= config[:shortname] %>::params::piddir}":
      ensure  => 'directory',
      owner   => "${<%= config[:shortname] %>::params::piddir_user}",
      group   => "${<%= config[:shortname] %>::params::piddir_group}",
      mode    => "${<%= config[:shortname] %>::params::piddir_mode}",
    }
  }
  else
  {
    # Here $<%= config[:shortname] %>::ensure is 'absent'
    file {
      [
        $<%= config[:shortname] %>::params::configdir,
        $<%= config[:shortname] %>::params::logdir,
        $<%= config[:shortname] %>::params::piddir,
      ]:
        ensure => $<%= config[:shortname] %>::ensure,
        force  => true,
    }
  }
    # Sysconfig / default daemon directory
    file { "${<%= config[:shortname] %>::params::default_sysconfig}":
      ensure  => $<%= config[:shortname] %>::ensure,
      owner   => $<%= config[:shortname] %>::params::configfile_owner,
      group   => $<%= config[:shortname] %>::params::configfile_group,
      mode    => '0755',
      #content => template("<%= config[:shortname] %>/default/<%= config[:shortname] %>.erb"),
      #source => "puppet:///modules/<%= config[:shortname] %>/default/<%= config[:shortname] %>.conf",
      notify  =>  Service['<%= config[:shortname] %>'],
      require =>  Package['<%= config[:shortname] %>']
    }

  service { '<%= config[:shortname] %>':
    ensure     => ($<%= config[:shortname] %>::ensure == 'present'),
    name       => "${<%= config[:shortname] %>::params::servicename}",
    enable     => ($<%= config[:shortname] %>::ensure == 'present'),
    pattern    => "${<%= config[:shortname] %>::params::processname}",
    hasrestart => "${<%= config[:shortname] %>::params::hasrestart}",
    hasstatus  => "${<%= config[:shortname] %>::params::hasstatus}",
    require    => [
      Package['<%= config[:shortname] %>'],
      File[$<%= config[:shortname] %>::params::configdir],
      File[$<%= config[:shortname] %>::params::logdir],
      File[$<%= config[:shortname] %>::params::piddir],
      File[$<%= config[:shortname] %>::params::configfile_init]
    ],
    subscribe  => File['<%= config[:shortname] %>.conf'],
  }

}
